#Importing the Keras libraries and packages
import tensorflow.keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Convolution2D
from tensorflow.keras.layers import MaxPooling2D
from tensorflow.keras.layers import Flatten
from tensorflow.keras.layers import Dense

#Initializing the CNN
classifier = Sequential()

#Step 1-Convolution
classifier.add(Convolution2D(32, 3, 3, input_shape = (64, 64, 3), activation = 'relu'))

#Step 2-Pooling
classifier.add(MaxPooling2D(pool_size = (2,2)))

#Step 3-Flattening
classifier.add(Flatten())

#Step 4-Fully Connected Layer
classifier.add(Dense(units = 128, activation = 'relu'))
classifier.add(Dense(units = 27, activation = 'softmax'))


#Compiling the CNN
classifier.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy', metrics = ['accuracy'])

#Part 2-Fitting the CNN to the Images
from keras.preprocessing.image import ImageDataGenerator
train_datagen = ImageDataGenerator(
        rescale=1./255,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True)

test_datagen = ImageDataGenerator(rescale=1./255)

training_set = train_datagen.flow_from_directory(
        'aslcopy',
        target_size=(64, 64),
        batch_size=32,
        class_mode='sparse')


test_set = test_datagen.flow_from_directory(
        'ASL/test',
        target_size=(64, 64),
        batch_size=32,
        class_mode='sparse')

classifier.fit_generator(
        training_set,
        steps_per_epoch=100,
        epochs=30,
        validation_data=test_set,
        validation_steps=None)


#Save and load model
from tensorflow import keras
classifier.save("Section 40 - Convolutional Neural Networks (CNN)")
classifier = keras.models.load_model('Section 40 - Convolutional Neural Networks (CNN)')

alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '_']

import cv2
from keras.preprocessing import image
import numpy as np

cam = cv2.VideoCapture(0)

cv2.namedWindow("test")

img_counter = 0

while True:
    ret, frame = cam.read()
    if not ret:
        print("failed to grab frame")
        break
    cv2.imshow("test", frame)

    k = cv2.waitKey(1)
    if k%256 == 27:
        # ESC pressed
        print("Escape hit, closing...")
        break
    elif k%256 == 32:
        # SPACE pressed
        img_name = "opencv_frame_{}.jpg".format(img_counter)
        cv2.imwrite(img_name, frame)
        

        test_image = image.load_img("opencv_frame_{}.jpg".format(img_counter), target_size = ( 64, 64))
        test_image = image.img_to_array(test_image)
        test_image = np.expand_dims(test_image, axis = 0)
        result = classifier.predict_classes(test_image)
        print(alphabet[result])
        img_counter += 1

#training_set.class_indices

cam.release()

cv2.destroyAllWindows()

test_image = image.load_img("L_test.jpg".format(img_counter), target_size = ( 64, 64))
test_image = image.img_to_array(test_image)
test_image = np.expand_dims(test_image, axis = 0)
result = classifier.predict_classes(test_image)
print(result)




